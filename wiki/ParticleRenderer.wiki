#summary Lepton particle renderer objects

Particle renderers control the presentation of [Particle]s in a ParticleGroup. Renderers are typically bound to a group and invoked by the group's `draw()` method. Renders may also be invoked separately if desired, which can be useful if particular state changes are required before rendering a particular group.

A renderer object must implement the methods `set_group()` and `draw()`. Below is an implementation of an abstract renderer class:

{{{
class Renderer(object):
	"""Renderer base class"""

	group = None

	def set_group(self, group):
		"""Set the renderer's group"""
		if self.group is not None and self.group is not group:
			self.group.set_renderer(None)
		self.group = group
	
	def draw(self):
		"""Render the group's particles"""
		...
}}}

== OpenGL State in Renderers ==

Any assumptions a renderer makes about the OpenGL state should be documented. Relying on particular state should be avoided where possible, since multiple renderers will often be invoked by the application indirectly, and in arbitrary order.

If the renderer modifies the OpenGL state, it should restore it where practical to avoid adversely affecting other renderers that follow or the calling application.

== Built-in Renderers ==

Two particle renderers are currently included with the Lepton engine:

  * PointRenderer -- Simple renderer using OpenGL GL_POINTs. Does not support individual particle size or rotation. May use textures by enabling point sprites in your application.

  * BillboardRenderer -- A more advanced aligned-quad billboard renderer using OpenGL. natively supports individual particle size and texturing. Rotation support will be added soon.